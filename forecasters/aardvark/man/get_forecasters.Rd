% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_forecasters.R
\name{get_forecasters}
\alias{get_forecasters}
\title{Return the desired Delphi Lab pandemic forecaster}
\usage{
get_forecasters(geo_type = "state", signals, ahead)
}
\arguments{
\item{geo_type}{String indicating geographical type, such as "county", "state",
                or "nation". See the 
\href{https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html}{COVIDcast Geographic Coding documentation}
                for available options.}

\item{signals}{Tibble with columns \code{data_source}, \code{signal}, 
\code{start_day} that specify which variables from the COVIDcast API will 
be used by forecaster. Each row of signals represents a separate signal, 
and first row is taken to be the response.}

\item{ahead}{The number of incidence periods ahead to forecast the response.
For \code{incidence_period = "epiweek"}, one of 1, 2, 3, 4.}
}
\value{
The forecaster function. Unavailable forecasters return \code{NA}.
}
\description{
The \link[evalcast]{evalcast-package} production evaluator 
    will first call this function to determine all the forecasters available
    for the given parameter specifications. If a forecaster function 
    is not available for a given set of parameters, an \code{NA} should 
    returned instead of a function. This tells the evaluator to ignore that
    forecaster in that run.
}
\examples{
    state_signals <- dplyr::tibble(data_source = "jhu-csse",
                                   signal = c("deaths_incidence_num", "confirmed_incidence_num"), 
                                   start_day = "2020-03-07")
    ahead <- 1
    state_forecaster <- aardvark::get_forecasters(geo_type = "state", 
                                                  signals = state_signals, 
                                                  ahead = ahead)
   \dontrun{
   preds <- get_predictions(forecaster = state_forecaster,
                            name_of_forecaster = "aardvark",
                            signals = state_signals,
                            forecast_dates = "2021-02-22",
                            incidence_period = "epiweek",
                            ahead = ahead,
                            geo_type = geo_type,
                            apply_corrections = corrections,
                            signal_aggregation = "list",
                            as_of_override = function(forecast_date){return(as.Date("2021-02-22") + 7)}
                            )
   }
}
